
@{
    ViewData["Title"] = "Address";
}

<h1>Address</h1>
<select id="selectCity">
</select>
<select id="selectDistrict">
</select>

@section Scripts{
    <script>
        const selCity = document.querySelector('#select1');
        const selDistrict = document.querySelector('#selectDistrict');

        (async () => {
            const url = '@Url.Content("~/api/cities")';
            const response = await fetch(url);
            const datas = await response.json();
            //資料讀取 還有以下方法 foreach for
            const optCities = datas.map(city => {
                return(`<option>${city}</option>`)
                //箭頭函數在只有一行的情況下可以不寫return
                //const optCities = datas.map(city => `<option>${city}</option>`);
                  
            });

            //資料顯示
            selCity.innerHTML=optCities.join("");
            //因為是陣列 所以要用join

            //載入鄉鎮區資料 需放入非同步Section內
            loadDistricts();
        })();

        const loadDistricts = async () => {
            //讀取city名稱

            // console.log(selCity.selectedIndex);
            // console.log(selCity.options[selCity.selectedIndex].value);
            //以上程式碼放在這邊無法顯示抓到的城市，因為loadDistricts比上面async早執行

            const city = selCity.options[selCity.selectedIndex].value;
            const url = `@Url.Content("~/api/district")?city=${city}`;
            const response = await fetch(url);
            const datas = await response.json();
            //讀取資料
            const optDistricts = datas.map(district => `<option value='${district}'>${district}</option>`);
            //反引號是 js es6語法 可以在字符串中插入變數或是表達式
            //顯示資料
            selDistrict.innerHTML = optDistricts.join("");

        }

        selCity.addEventListener('change', loadDistricts);
        //addEventListener('事件',動作);
    </script>
}